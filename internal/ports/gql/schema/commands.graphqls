type Command {
    name: String!
    response: Response!
    aliases: [String!]!
}

input CommandCreation {
    name: String!
    response: ResponseInput!
    aliases: [String!]!
}

input CommandUpdate {
    name: String
    response: ResponseInput
    aliases: [String!]
}

extend type Query {
    listAllCommands: [Command!]!
    findCommand(name: String!): Command
    executeCommand(text: String!): Response
    searchCommands(search: String!): [Command!]!
}

extend type Mutation {
    createCommand(command: CommandCreation!): Boolean!
    updateCommand(name: String!, command: CommandUpdate!): Command
    deleteCommand(name: String!): Boolean!
}