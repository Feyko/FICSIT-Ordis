// Code generated by gqlclientgen - DO NOT EDIT

package smr

import (
	"context"
	gqlclient "git.sr.ht/~emersion/gqlclient"
)

type Announcement struct {
	Id         AnnouncementID         `json:"id"`
	Message    string                 `json:"message"`
	Importance AnnouncementImportance `json:"importance"`
}

type AnnouncementID string

type AnnouncementImportance string

const (
	AnnouncementImportanceFix     AnnouncementImportance = "Fix"
	AnnouncementImportanceInfo    AnnouncementImportance = "Info"
	AnnouncementImportanceWarning AnnouncementImportance = "Warning"
	AnnouncementImportanceAlert   AnnouncementImportance = "Alert"
)

type BootstrapVersion struct {
	Id                   BootstrapVersionID `json:"id"`
	Version              string             `json:"version"`
	Satisfactory_version int32              `json:"satisfactory_version"`
	Stability            VersionStabilities `json:"stability"`
	Link                 string             `json:"link"`
	Changelog            string             `json:"changelog"`
	Date                 Date               `json:"date"`
	Updated_at           Date               `json:"updated_at"`
	Created_at           Date               `json:"created_at"`
}

type BootstrapVersionFields string

const (
	BootstrapVersionFieldsName                BootstrapVersionFields = "name"
	BootstrapVersionFieldsCreatedAt           BootstrapVersionFields = "created_at"
	BootstrapVersionFieldsUpdatedAt           BootstrapVersionFields = "updated_at"
	BootstrapVersionFieldsSatisfactoryVersion BootstrapVersionFields = "satisfactory_version"
	BootstrapVersionFieldsDate                BootstrapVersionFields = "date"
)

type BootstrapVersionFilter struct {
	Limit    *int32                  `json:"limit,omitempty"`
	Offset   *int32                  `json:"offset,omitempty"`
	Order_by *BootstrapVersionFields `json:"order_by,omitempty"`
	Order    *Order                  `json:"order,omitempty"`
	Search   *string                 `json:"search,omitempty"`
	Ids      []string                `json:"ids,omitempty"`
}

type BootstrapVersionID string

type Compatibility struct {
	State CompatibilityState `json:"state"`
	Note  *string            `json:"note,omitempty"`
}

type CompatibilityInfo struct {
	EA  *Compatibility `json:"EA"`
	EXP *Compatibility `json:"EXP"`
}

type CompatibilityInfoInput struct {
	EA  CompatibilityInput `json:"EA"`
	EXP CompatibilityInput `json:"EXP"`
}

type CompatibilityInput struct {
	State CompatibilityState `json:"state"`
	Note  *string            `json:"note,omitempty"`
}

type CompatibilityState string

const (
	CompatibilityStateWorks   CompatibilityState = "Works"
	CompatibilityStateDamaged CompatibilityState = "Damaged"
	CompatibilityStateBroken  CompatibilityState = "Broken"
)

type CreateVersionResponse struct {
	Auto_approved bool     `json:"auto_approved"`
	Version       *Version `json:"version,omitempty"`
}

type Date string

type GetBootstrapVersions struct {
	Bootstrap_versions []BootstrapVersion `json:"bootstrap_versions"`
	Count              int32              `json:"count"`
}

type GetGuides struct {
	Guides []Guide `json:"guides"`
	Count  int32   `json:"count"`
}

type GetMods struct {
	Mods  []Mod `json:"mods"`
	Count int32 `json:"count"`
}

type GetMyMods struct {
	Mods  []Mod `json:"mods"`
	Count int32 `json:"count"`
}

type GetMyVersions struct {
	Versions []Version `json:"versions"`
	Count    int32     `json:"count"`
}

type GetSMLVersions struct {
	Sml_versions []SMLVersion `json:"sml_versions"`
	Count        int32        `json:"count"`
}

type GetVersions struct {
	Versions []Version `json:"versions"`
	Count    int32     `json:"count"`
}

type Group struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type Guide struct {
	Id                GuideID `json:"id"`
	Name              string  `json:"name"`
	Short_description string  `json:"short_description"`
	Guide             string  `json:"guide"`
	Views             int32   `json:"views"`
	User_id           UserID  `json:"user_id"`
	Updated_at        Date    `json:"updated_at"`
	Created_at        Date    `json:"created_at"`
	Tags              []Tag   `json:"tags"`
	User              *User   `json:"user"`
}

type GuideFields string

const (
	GuideFieldsName      GuideFields = "name"
	GuideFieldsCreatedAt GuideFields = "created_at"
	GuideFieldsUpdatedAt GuideFields = "updated_at"
	GuideFieldsViews     GuideFields = "views"
)

type GuideFilter struct {
	Limit    *int32       `json:"limit,omitempty"`
	Offset   *int32       `json:"offset,omitempty"`
	Order_by *GuideFields `json:"order_by,omitempty"`
	Order    *Order       `json:"order,omitempty"`
	Search   *string      `json:"search,omitempty"`
	Ids      []string     `json:"ids,omitempty"`
	TagIDs   []TagID      `json:"tagIDs,omitempty"`
}

type GuideID string

type LatestVersions struct {
	Alpha   *Version `json:"alpha,omitempty"`
	Beta    *Version `json:"beta,omitempty"`
	Release *Version `json:"release,omitempty"`
}

type Mod struct {
	Id                ModID              `json:"id"`
	Name              string             `json:"name"`
	Short_description string             `json:"short_description"`
	Full_description  *string            `json:"full_description,omitempty"`
	Logo              *string            `json:"logo,omitempty"`
	Source_url        *string            `json:"source_url,omitempty"`
	Creator_id        UserID             `json:"creator_id"`
	Approved          bool               `json:"approved"`
	Views             int32              `json:"views"`
	Downloads         int32              `json:"downloads"`
	Hotness           int32              `json:"hotness"`
	Popularity        int32              `json:"popularity"`
	Updated_at        Date               `json:"updated_at"`
	Created_at        Date               `json:"created_at"`
	Last_version_date *Date              `json:"last_version_date,omitempty"`
	Mod_reference     ModReference       `json:"mod_reference"`
	Hidden            bool               `json:"hidden"`
	Tags              []Tag              `json:"tags,omitempty"`
	Compatibility     *CompatibilityInfo `json:"compatibility,omitempty"`
	Authors           []UserMod          `json:"authors"`
	Version           *Version           `json:"version,omitempty"`
	Versions          []Version          `json:"versions"`
	LatestVersions    *LatestVersions    `json:"latestVersions"`
}

type ModFields string

const (
	ModFieldsCreatedAt       ModFields = "created_at"
	ModFieldsUpdatedAt       ModFields = "updated_at"
	ModFieldsName            ModFields = "name"
	ModFieldsViews           ModFields = "views"
	ModFieldsDownloads       ModFields = "downloads"
	ModFieldsHotness         ModFields = "hotness"
	ModFieldsPopularity      ModFields = "popularity"
	ModFieldsLastVersionDate ModFields = "last_version_date"
	ModFieldsSearch          ModFields = "search"
)

type ModFilter struct {
	Limit      *int32     `json:"limit,omitempty"`
	Offset     *int32     `json:"offset,omitempty"`
	Order_by   *ModFields `json:"order_by,omitempty"`
	Order      *Order     `json:"order,omitempty"`
	Search     *string    `json:"search,omitempty"`
	Ids        []string   `json:"ids,omitempty"`
	References []string   `json:"references,omitempty"`
	Hidden     *bool      `json:"hidden,omitempty"`
	TagIDs     []TagID    `json:"tagIDs,omitempty"`
}

type ModID string

type ModReference string

type ModVersion struct {
	Id            ModID        `json:"id"`
	Mod_reference ModReference `json:"mod_reference"`
	Versions      []Version    `json:"versions"`
}

type ModVersionConstraint struct {
	ModIdOrReference string `json:"modIdOrReference"`
	Version          string `json:"version"`
}

type NewAnnouncement struct {
	Message    string                 `json:"message"`
	Importance AnnouncementImportance `json:"importance"`
}

type NewBootstrapVersion struct {
	Version              string             `json:"version"`
	Satisfactory_version int32              `json:"satisfactory_version"`
	Stability            VersionStabilities `json:"stability"`
	Link                 string             `json:"link"`
	Changelog            string             `json:"changelog"`
	Date                 Date               `json:"date"`
}

type NewGuide struct {
	Name              string  `json:"name"`
	Short_description string  `json:"short_description"`
	Guide             string  `json:"guide"`
	TagIDs            []TagID `json:"tagIDs,omitempty"`
}

type NewMod struct {
	Name              string            `json:"name"`
	Short_description string            `json:"short_description"`
	Full_description  *string           `json:"full_description,omitempty"`
	Logo              *gqlclient.Upload `json:"logo,omitempty"`
	Source_url        *string           `json:"source_url,omitempty"`
	Mod_reference     ModReference      `json:"mod_reference"`
	Hidden            *bool             `json:"hidden,omitempty"`
	TagIDs            []TagID           `json:"tagIDs,omitempty"`
}

type NewSMLVersion struct {
	Version              string             `json:"version"`
	Satisfactory_version int32              `json:"satisfactory_version"`
	Stability            VersionStabilities `json:"stability"`
	Link                 string             `json:"link"`
	Changelog            string             `json:"changelog"`
	Date                 Date               `json:"date"`
	Bootstrap_version    *string            `json:"bootstrap_version,omitempty"`
}

type NewVersion struct {
	Changelog string             `json:"changelog"`
	Stability VersionStabilities `json:"stability"`
}

type OAuthOptions struct {
	Github   string `json:"github"`
	Google   string `json:"google"`
	Facebook string `json:"facebook"`
}

type Order string

const (
	OrderAsc  Order = "asc"
	OrderDesc Order = "desc"
)

type SMLVersion struct {
	Id                   SMLVersionID       `json:"id"`
	Version              string             `json:"version"`
	Satisfactory_version int32              `json:"satisfactory_version"`
	Stability            VersionStabilities `json:"stability"`
	Link                 string             `json:"link"`
	Changelog            string             `json:"changelog"`
	Date                 Date               `json:"date"`
	Bootstrap_version    *string            `json:"bootstrap_version,omitempty"`
	Updated_at           Date               `json:"updated_at"`
	Created_at           Date               `json:"created_at"`
}

type SMLVersionFields string

const (
	SMLVersionFieldsName                SMLVersionFields = "name"
	SMLVersionFieldsCreatedAt           SMLVersionFields = "created_at"
	SMLVersionFieldsUpdatedAt           SMLVersionFields = "updated_at"
	SMLVersionFieldsSatisfactoryVersion SMLVersionFields = "satisfactory_version"
	SMLVersionFieldsDate                SMLVersionFields = "date"
)

type SMLVersionFilter struct {
	Limit    *int32            `json:"limit,omitempty"`
	Offset   *int32            `json:"offset,omitempty"`
	Order_by *SMLVersionFields `json:"order_by,omitempty"`
	Order    *Order            `json:"order,omitempty"`
	Search   *string           `json:"search,omitempty"`
	Ids      []string          `json:"ids,omitempty"`
}

type SMLVersionID string

type Tag struct {
	Id   TagID   `json:"id"`
	Name TagName `json:"name"`
}

type TagFilter struct {
	Limit  *int32  `json:"limit,omitempty"`
	Offset *int32  `json:"offset,omitempty"`
	Order  *Order  `json:"order,omitempty"`
	Search *string `json:"search,omitempty"`
	Ids    []TagID `json:"ids,omitempty"`
}

type TagID string

type TagName string

type UpdateAnnouncement struct {
	Message    *string                 `json:"message,omitempty"`
	Importance *AnnouncementImportance `json:"importance,omitempty"`
}

type UpdateBootstrapVersion struct {
	Version              *string             `json:"version,omitempty"`
	Satisfactory_version *int32              `json:"satisfactory_version,omitempty"`
	Stability            *VersionStabilities `json:"stability,omitempty"`
	Link                 *string             `json:"link,omitempty"`
	Changelog            *string             `json:"changelog,omitempty"`
	Date                 *Date               `json:"date,omitempty"`
}

type UpdateGuide struct {
	Name              *string `json:"name,omitempty"`
	Short_description *string `json:"short_description,omitempty"`
	Guide             *string `json:"guide,omitempty"`
	TagIDs            []TagID `json:"tagIDs,omitempty"`
}

type UpdateMod struct {
	Name              *string                 `json:"name,omitempty"`
	Short_description *string                 `json:"short_description,omitempty"`
	Full_description  *string                 `json:"full_description,omitempty"`
	Logo              *gqlclient.Upload       `json:"logo,omitempty"`
	Source_url        *string                 `json:"source_url,omitempty"`
	Mod_reference     *ModReference           `json:"mod_reference,omitempty"`
	Authors           []UpdateUserMod         `json:"authors,omitempty"`
	Hidden            *bool                   `json:"hidden,omitempty"`
	TagIDs            []TagID                 `json:"tagIDs,omitempty"`
	Compatibility     *CompatibilityInfoInput `json:"compatibility,omitempty"`
}

type UpdateSMLVersion struct {
	Version              *string             `json:"version,omitempty"`
	Satisfactory_version *int32              `json:"satisfactory_version,omitempty"`
	Stability            *VersionStabilities `json:"stability,omitempty"`
	Link                 *string             `json:"link,omitempty"`
	Changelog            *string             `json:"changelog,omitempty"`
	Date                 *Date               `json:"date,omitempty"`
	Bootstrap_version    *string             `json:"bootstrap_version,omitempty"`
}

type UpdateUser struct {
	Avatar   *gqlclient.Upload `json:"avatar,omitempty"`
	Groups   []string          `json:"groups,omitempty"`
	Username *string           `json:"username,omitempty"`
}

type UpdateUserMod struct {
	User_id UserID `json:"user_id"`
	Role    string `json:"role"`
}

type UpdateVersion struct {
	Changelog *string             `json:"changelog,omitempty"`
	Stability *VersionStabilities `json:"stability,omitempty"`
}

type User struct {
	Id          UserID     `json:"id"`
	Email       *string    `json:"email,omitempty"`
	Username    string     `json:"username"`
	Avatar      *string    `json:"avatar,omitempty"`
	Created_at  Date       `json:"created_at"`
	Github_id   *string    `json:"github_id,omitempty"`
	Google_id   *string    `json:"google_id,omitempty"`
	Facebook_id *string    `json:"facebook_id,omitempty"`
	Roles       *UserRoles `json:"roles"`
	Groups      []Group    `json:"groups"`
	Mods        []UserMod  `json:"mods"`
	Guides      []Guide    `json:"guides"`
}

type UserID string

type UserMod struct {
	User_id UserID `json:"user_id"`
	Mod_id  ModID  `json:"mod_id"`
	Role    string `json:"role"`
	User    *User  `json:"user"`
	Mod     *Mod   `json:"mod"`
}

type UserRoles struct {
	ApproveMods             bool `json:"approveMods"`
	ApproveVersions         bool `json:"approveVersions"`
	DeleteContent           bool `json:"deleteContent"`
	EditContent             bool `json:"editContent"`
	EditUsers               bool `json:"editUsers"`
	EditSMLVersions         bool `json:"editSMLVersions"`
	EditBootstrapVersions   bool `json:"editBootstrapVersions"`
	EditAnyModCompatibility bool `json:"editAnyModCompatibility"`
}

type UserSession struct {
	Token string `json:"token"`
}

type Version struct {
	Id           VersionID           `json:"id"`
	Mod_id       ModID               `json:"mod_id"`
	Version      string              `json:"version"`
	Sml_version  string              `json:"sml_version"`
	Changelog    string              `json:"changelog"`
	Downloads    int32               `json:"downloads"`
	Stability    VersionStabilities  `json:"stability"`
	Approved     bool                `json:"approved"`
	Updated_at   Date                `json:"updated_at"`
	Created_at   Date                `json:"created_at"`
	Link         string              `json:"link"`
	Metadata     *string             `json:"metadata,omitempty"`
	Size         *int32              `json:"size,omitempty"`
	Hash         *string             `json:"hash,omitempty"`
	Mod          *Mod                `json:"mod"`
	Dependencies []VersionDependency `json:"dependencies"`
}

type VersionDependency struct {
	Version_id VersionID `json:"version_id"`
	Mod_id     ModID     `json:"mod_id"`
	Condition  string    `json:"condition"`
	Optional   bool      `json:"optional"`
	Mod        *Mod      `json:"mod,omitempty"`
	Version    *Version  `json:"version,omitempty"`
}

type VersionFields string

const (
	VersionFieldsCreatedAt VersionFields = "created_at"
	VersionFieldsUpdatedAt VersionFields = "updated_at"
	VersionFieldsDownloads VersionFields = "downloads"
)

type VersionFilter struct {
	Limit    *int32         `json:"limit,omitempty"`
	Offset   *int32         `json:"offset,omitempty"`
	Order_by *VersionFields `json:"order_by,omitempty"`
	Order    *Order         `json:"order,omitempty"`
	Search   *string        `json:"search,omitempty"`
	Ids      []string       `json:"ids,omitempty"`
}

type VersionID string

type VersionStabilities string

const (
	VersionStabilitiesAlpha   VersionStabilities = "alpha"
	VersionStabilitiesBeta    VersionStabilities = "beta"
	VersionStabilitiesRelease VersionStabilities = "release"
)

func QGetSMLVersions(client *gqlclient.Client, ctx context.Context) (getSMLVersions *GetSMLVersions, err error) {
	op := gqlclient.NewOperation("query QGetSMLVersions {\n\tgetSMLVersions(filter: {limit:100}) {\n\t\tsml_versions {\n\t\t\tversion\n\t\t\tsatisfactory_version\n\t\t}\n\t}\n}\n")
	var respData struct {
		GetSMLVersions *GetSMLVersions
	}
	err = client.Execute(ctx, op, &respData)
	return respData.GetSMLVersions, err
}
